/*
 * Copyright 2018, 2020 Mark Scott
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.codebrewer.dump1090processor.basestation.domain;

/**
 * The message types generated by BaseStation.
 *
 * <p>Based on information from http://woodair.net/sbs/Article/Barebones42_Socket_Data.htm
 *
 * @see DomainUtils#isExpectedMessageType(MessageType)
 */
public enum MessageType {
  /**
   * The "New Aircraft" message type, generated when an aircraft not currently being tracked is
   * first seen.
   */
  AIR(10),

  /**
   * The "User Click" message type, generated when the user performs a mouse click in the
   * BaseStation application.
   *
   * <p>This message type is assumed never to be generated by dump1090.
   */
  CLK(10),

  /**
   * The "New ID" message type, generated when an aircraft being tracked sets or changes its
   * callsign.
   *
   * <p>dump1090 sends this message immediately after sending an {@link #AIR} message.
   */
  ID(11),

  /**
   * The "Transmission" message type having one of 8 {@link StatusMessageType sub-types}.
   */
  MSG(22),

  /**
   * The "User selection change" message type, generated when the user performs an aircraft
   * selection change in the BaseStation application.
   *
   * <p>This message type is assumed never to be generated by dump1090.
   */
  SEL(11),

  /**
   * The "Status Change" message type, generated when an aircraft's status changes in one of a
   * {@link StatusMessageType number} of ways.
   */
  STA(11);

  // The total number of tokens to expect in the CSV representation of this type of message (note
  // that some tokens may be empty)
  //
  private final int messageTokenCount;

  /**
   * The sole constructor for this enum type, specifying the number of tokens in the CSV
   * representation of a message of this type.
   *
   * @param messageTokenCount the number of tokens in the CSV representation of a message of this
   * type.
   */
  MessageType(int messageTokenCount) {
    this.messageTokenCount = messageTokenCount;
  }

  /**
   * Returns the number of tokens in the CSV representation of a message of this type.
   *
   * @return the number of tokens in the CSV representation of a message of this type
   */
  public int getMessageTokenCount() {
    return messageTokenCount;
  }
}
